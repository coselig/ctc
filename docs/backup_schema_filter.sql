-- Filtered app schema dump (public-only)
-- Source: backup_schema.sql minus system objects and duplicates found in backup_schema_pure.sql
-- Generated by ChatGPT on request
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename

--
-- Name: get_current_user_role(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.get_current_user_role() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

DECLARE

  user_role text

RETURN COALESCE(user_role, 'employee')

ALTER FUNCTION public.get_current_user_role() OWNER TO supabase_admin

--
-- Name: FUNCTION get_current_user_role(); Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON FUNCTION public.get_current_user_role() IS '安全地獲取當前用戶角色（繞過 RLS 避免遞迴）'

--
-- Name: get_employee_leave_balance(uuid, integer); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.get_employee_leave_balance(p_employee_id uuid, p_year integer DEFAULT NULL::integer) RETURNS TABLE(employee_id uuid, leave_type text, total_days numeric, used_days numeric, pending_days numeric, remaining_days numeric)
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        lb.employee_id,
        lb.leave_type,
        lb.total_days,
        lb.used_days,
        lb.pending_days,
        (lb.total_days - lb.used_days - lb.pending_days) AS remaining_days
    FROM leave_balances lb
    WHERE lb.employee_id = p_employee_id
      AND (p_year IS NULL OR lb.year = p_year)
    ORDER BY lb.leave_type

ALTER FUNCTION public.get_employee_leave_balance(p_employee_id uuid, p_year integer) OWNER TO supabase_admin

--
-- Name: get_floor_plan_permissions(uuid); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.get_floor_plan_permissions(p_floor_plan_id uuid) RETURNS TABLE(id uuid, floor_plan_id uuid, user_id uuid, permission_level integer, created_at timestamp with time zone, updated_at timestamp with time zone, user_email text, user_full_name text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    fpp.id,
    fpp.floor_plan_id,
    fpp.user_id,
    fpp.permission_level,
    fpp.created_at,
    fpp.updated_at,
    p.email as user_email,
    p.full_name as user_full_name
  FROM public.floor_plan_permissions fpp
  LEFT JOIN public.profiles p ON fpp.user_id = p.id
  WHERE fpp.floor_plan_id = p_floor_plan_id
  ORDER BY fpp.created_at DESC

ALTER FUNCTION public.get_floor_plan_permissions(p_floor_plan_id uuid) OWNER TO supabase_admin

--
-- Name: get_project_statistics(uuid); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.get_project_statistics(p_project_id uuid) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  result jsonb

BEGIN
  SELECT jsonb_build_object(
    'total_members', (SELECT COUNT(*) FROM public.project_members WHERE project_id = p_project_id),
    'total_clients', (SELECT COUNT(*) FROM public.project_clients WHERE project_id = p_project_id),
    'total_timeline_items', (SELECT COUNT(*) FROM public.project_timeline WHERE project_id = p_project_id),
    'completed_timeline_items', (SELECT COUNT(*) FROM public.project_timeline WHERE project_id = p_project_id AND is_completed = true),
    'total_comments', (SELECT COUNT(*) FROM public.project_comments WHERE project_id = p_project_id),
    'total_tasks', (SELECT COUNT(*) FROM public.project_tasks WHERE project_id = p_project_id),
    'completed_tasks', (SELECT COUNT(*) FROM public.project_tasks WHERE project_id = p_project_id AND status = 'completed'),
    'in_progress_tasks', (SELECT COUNT(*) FROM public.project_tasks WHERE project_id = p_project_id AND status = 'in_progress'),
    'total_floor_plans', (SELECT COUNT(*) FROM public.floor_plans WHERE project_id = p_project_id)
  ) INTO result

RETURN result

ALTER FUNCTION public.get_project_statistics(p_project_id uuid) OWNER TO supabase_admin

--
-- Name: get_user_role(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.get_user_role() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  user_role text

RETURN COALESCE(user_role, 'employee')

ALTER FUNCTION public.get_user_role() OWNER TO supabase_admin

--
-- Name: FUNCTION get_user_role(); Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON FUNCTION public.get_user_role() IS '獲取當前用戶的角色'

--
-- Name: handle_new_user(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.handle_new_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  INSERT INTO public.user_profiles (user_id, email, display_name, avatar_url)
  VALUES (
    NEW.id,
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'display_name', NEW.raw_user_meta_data->>'name', split_part(NEW.email, '@', 1)),
    NEW.raw_user_meta_data->>'avatar_url'
  )

ALTER FUNCTION public.handle_new_user() OWNER TO supabase_admin

-- 檢查是否有任何等級的權限
  IF EXISTS (
    SELECT 1 FROM floor_plan_permissions
    WHERE floor_plan_id = p_floor_plan_id
    AND user_id = p_user_id
  ) THEN
    RETURN TRUE

RETURN FALSE

ALTER FUNCTION public.has_floor_plan_access(p_floor_plan_id uuid, p_user_id uuid) OWNER TO supabase_admin

--
-- Name: FUNCTION has_floor_plan_access(p_floor_plan_id uuid, p_user_id uuid); Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON FUNCTION public.has_floor_plan_access(p_floor_plan_id uuid, p_user_id uuid) IS '檢查用戶是否有設計圖的存取權限（任何等級）。使用 SECURITY DEFINER 繞過 RLS，避免遞迴。'

-- 檢查是否有管理權限
  IF EXISTS (
    SELECT 1 FROM floor_plan_permissions
    WHERE floor_plan_id = p_floor_plan_id
    AND user_id = p_user_id
    AND permission_level = 3
  ) THEN
    RETURN TRUE

RETURN FALSE

ALTER FUNCTION public.has_floor_plan_admin_access(p_floor_plan_id uuid, p_user_id uuid) OWNER TO supabase_admin

--
-- Name: FUNCTION has_floor_plan_admin_access(p_floor_plan_id uuid, p_user_id uuid); Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON FUNCTION public.has_floor_plan_admin_access(p_floor_plan_id uuid, p_user_id uuid) IS '檢查用戶是否有設計圖的管理權限（等級 = 3 或擁有者）。使用 SECURITY DEFINER 繞過 RLS，避免遞迴。'

-- 檢查是否有編輯或管理權限
  IF EXISTS (
    SELECT 1 FROM floor_plan_permissions
    WHERE floor_plan_id = p_floor_plan_id
    AND user_id = p_user_id
    AND permission_level >= 2
  ) THEN
    RETURN TRUE

RETURN FALSE

ALTER FUNCTION public.has_floor_plan_edit_access(p_floor_plan_id uuid, p_user_id uuid) OWNER TO supabase_admin

--
-- Name: FUNCTION has_floor_plan_edit_access(p_floor_plan_id uuid, p_user_id uuid); Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON FUNCTION public.has_floor_plan_edit_access(p_floor_plan_id uuid, p_user_id uuid) IS '檢查用戶是否有設計圖的編輯權限（等級 >= 2）。使用 SECURITY DEFINER 繞過 RLS，避免遞迴。'

-- 檢查是否為專案成員（任何角色）
  IF EXISTS (
    SELECT 1 FROM public.project_members
    WHERE project_id = p_project_id
    AND user_id = p_user_id
  ) THEN
    RETURN TRUE

RETURN FALSE

ALTER FUNCTION public.has_project_access(p_project_id uuid, p_user_id uuid) OWNER TO supabase_admin

--
-- Name: FUNCTION has_project_access(p_project_id uuid, p_user_id uuid); Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON FUNCTION public.has_project_access(p_project_id uuid, p_user_id uuid) IS '檢查用戶是否有專案的存取權限（擁有者或任何角色的成員）。使用 SECURITY DEFINER 繞過 RLS，避免遞迴。'

-- 檢查是否為管理員
  IF EXISTS (
    SELECT 1 FROM public.project_members
    WHERE project_id = p_project_id
    AND user_id = p_user_id
    AND role = 'admin'
  ) THEN
    RETURN TRUE

RETURN FALSE

ALTER FUNCTION public.has_project_admin_access(p_project_id uuid, p_user_id uuid) OWNER TO supabase_admin

--
-- Name: FUNCTION has_project_admin_access(p_project_id uuid, p_user_id uuid); Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON FUNCTION public.has_project_admin_access(p_project_id uuid, p_user_id uuid) IS '檢查用戶是否有專案的管理權限（擁有者或管理員）。使用 SECURITY DEFINER 繞過 RLS，避免遞迴。'

--
-- Name: initialize_leave_balance(uuid, text, integer, numeric); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.initialize_leave_balance(p_employee_id uuid, p_leave_type text, p_year integer, p_total_days numeric) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
BEGIN
    INSERT INTO leave_balances (
        employee_id,
        leave_type,
        year,
        total_days,
        used_days,
        pending_days
    )
    VALUES (
        p_employee_id,
        p_leave_type,
        p_year,
        p_total_days,
        0,
        0
    )
    ON CONFLICT (employee_id, leave_type, year)
    DO UPDATE SET
        total_days = EXCLUDED.total_days,
        updated_at = NOW()

ALTER FUNCTION public.initialize_leave_balance(p_employee_id uuid, p_leave_type text, p_year integer, p_total_days numeric) OWNER TO supabase_admin

ALTER FUNCTION public.is_boss() OWNER TO supabase_admin

--
-- Name: FUNCTION is_boss(); Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON FUNCTION public.is_boss() IS '檢查當前用戶是否為老闆'

ALTER FUNCTION public.is_boss_or_hr() OWNER TO supabase_admin

--
-- Name: FUNCTION is_boss_or_hr(); Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON FUNCTION public.is_boss_or_hr() IS '檢查當前用戶是否為老闆或人事'

ALTER FUNCTION public.is_hr() OWNER TO supabase_admin

--
-- Name: FUNCTION is_hr(); Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON FUNCTION public.is_hr() IS '檢查當前用戶是否為人事'

--
-- Name: update_attendance_leave_requests_updated_at(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.update_attendance_leave_requests_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now())

ALTER FUNCTION public.update_attendance_leave_requests_updated_at() OWNER TO supabase_admin

--
-- Name: update_attendance_records_updated_at(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.update_attendance_records_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now())

ALTER FUNCTION public.update_attendance_records_updated_at() OWNER TO supabase_admin

--
-- Name: update_employee_updated_at(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.update_employee_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now())

ALTER FUNCTION public.update_employee_updated_at() OWNER TO supabase_admin

--
-- Name: update_leave_balance_on_request_change(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.update_leave_balance_on_request_change() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
DECLARE
    v_year INTEGER

BEGIN
    v_year := EXTRACT(YEAR FROM NEW.start_date)

-- 確保該員工該年度的假別額度記錄存在
    INSERT INTO leave_balances (employee_id, leave_type, year, total_days)
    VALUES (NEW.employee_id, NEW.leave_type, v_year, 0)
    ON CONFLICT (employee_id, leave_type, year) DO NOTHING

-- 如果是新增記錄
    IF TG_OP = 'INSERT' THEN
        IF NEW.status = 'pending' THEN
            -- 增加 pending_days
            UPDATE leave_balances
            SET pending_days = pending_days + NEW.total_days
            WHERE employee_id = NEW.employee_id
              AND leave_type = NEW.leave_type
              AND year = v_year

ELSIF NEW.status = 'approved' THEN
            -- 增加 used_days
            UPDATE leave_balances
            SET used_days = used_days + NEW.total_days
            WHERE employee_id = NEW.employee_id
              AND leave_type = NEW.leave_type
              AND year = v_year

-- 如果是更新記錄
    ELSIF TG_OP = 'UPDATE' THEN
        -- 先還原舊狀態
        IF OLD.status = 'pending' THEN
            UPDATE leave_balances
            SET pending_days = pending_days - OLD.total_days
            WHERE employee_id = OLD.employee_id
              AND leave_type = OLD.leave_type
              AND year = v_year

ELSIF OLD.status = 'approved' THEN
            UPDATE leave_balances
            SET used_days = used_days - OLD.total_days
            WHERE employee_id = OLD.employee_id
              AND leave_type = OLD.leave_type
              AND year = v_year

-- 套用新狀態
        IF NEW.status = 'pending' THEN
            UPDATE leave_balances
            SET pending_days = pending_days + NEW.total_days
            WHERE employee_id = NEW.employee_id
              AND leave_type = NEW.leave_type
              AND year = v_year

ELSIF NEW.status = 'approved' THEN
            UPDATE leave_balances
            SET used_days = used_days + NEW.total_days
            WHERE employee_id = NEW.employee_id
              AND leave_type = NEW.leave_type
              AND year = v_year

ALTER FUNCTION public.update_leave_balance_on_request_change() OWNER TO supabase_admin

--
-- Name: update_leave_balances_updated_at(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.update_leave_balances_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW()

ALTER FUNCTION public.update_leave_balances_updated_at() OWNER TO supabase_admin

--
-- Name: update_leave_requests_updated_at(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.update_leave_requests_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW()

ALTER FUNCTION public.update_leave_requests_updated_at() OWNER TO supabase_admin

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now())

ALTER FUNCTION public.update_updated_at_column() OWNER TO supabase_admin

--
-- Name: update_user_profiles_updated_at(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.update_user_profiles_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now())

ALTER FUNCTION public.update_user_profiles_updated_at() OWNER TO supabase_admin

$sql$
        USING prefix, bucket_name, limits, levels, start_after

--
-- Name: attendance_leave_requests; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.attendance_leave_requests (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    employee_id uuid NOT NULL,
    employee_name text NOT NULL,
    request_type text NOT NULL,
    request_date date NOT NULL,
    request_time timestamp with time zone,
    check_in_time timestamp with time zone,
    check_out_time timestamp with time zone,
    reason text NOT NULL,
    status text DEFAULT 'pending'::text NOT NULL,
    reviewer_id uuid,
    reviewer_name text,
    review_comment text,
    reviewed_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT attendance_leave_requests_request_type_check CHECK ((request_type = ANY (ARRAY['check_in'::text, 'check_out'::text, 'full_day'::text]))),
    CONSTRAINT attendance_leave_requests_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text])))
)

ALTER TABLE public.attendance_leave_requests OWNER TO supabase_admin

--
-- Name: TABLE attendance_leave_requests; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON TABLE public.attendance_leave_requests IS '補打卡申請記錄表'

--
-- Name: COLUMN attendance_leave_requests.id; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.id IS '申請ID (UUID)'

--
-- Name: COLUMN attendance_leave_requests.employee_id; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.employee_id IS '申請人ID'

--
-- Name: COLUMN attendance_leave_requests.employee_name; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.employee_name IS '申請人姓名'

--
-- Name: COLUMN attendance_leave_requests.request_type; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.request_type IS '申請類型 (check_in=補上班, check_out=補下班, full_day=補整天)'

--
-- Name: COLUMN attendance_leave_requests.request_date; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.request_date IS '申請補打卡的日期'

--
-- Name: COLUMN attendance_leave_requests.request_time; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.request_time IS '申請的打卡時間（單次打卡）'

--
-- Name: COLUMN attendance_leave_requests.check_in_time; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.check_in_time IS '補打卡的上班時間（整天）'

--
-- Name: COLUMN attendance_leave_requests.check_out_time; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.check_out_time IS '補打卡的下班時間（整天）'

--
-- Name: COLUMN attendance_leave_requests.reason; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.reason IS '申請原因'

--
-- Name: COLUMN attendance_leave_requests.status; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.status IS '狀態 (pending=待審核, approved=已核准, rejected=已拒絕)'

--
-- Name: COLUMN attendance_leave_requests.reviewer_id; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.reviewer_id IS '審核人ID'

--
-- Name: COLUMN attendance_leave_requests.reviewer_name; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.reviewer_name IS '審核人姓名'

--
-- Name: COLUMN attendance_leave_requests.review_comment; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.review_comment IS '審核意見'

--
-- Name: COLUMN attendance_leave_requests.reviewed_at; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.attendance_leave_requests.reviewed_at IS '審核時間'

--
-- Name: attendance_records; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.attendance_records (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    employee_id uuid NOT NULL,
    employee_name text NOT NULL,
    employee_email text NOT NULL,
    check_in_time timestamp with time zone NOT NULL,
    check_out_time timestamp with time zone,
    work_hours numeric(5,2),
    location text,
    notes text,
    is_manual_entry boolean DEFAULT false NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
)

ALTER TABLE public.attendance_records OWNER TO supabase_admin

--
-- Name: customers; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.customers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    name text NOT NULL,
    company text,
    email text,
    phone text,
    address text,
    notes text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
)

ALTER TABLE public.customers OWNER TO supabase_admin

--
-- Name: TABLE customers; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON TABLE public.customers IS '客戶資料表 - 儲存註冊為客戶的用戶資料'

--
-- Name: COLUMN customers.name; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.customers.name IS '客戶姓名'

--
-- Name: COLUMN customers.company; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.customers.company IS '客戶所屬公司名稱'

--
-- Name: employee_skills; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.employee_skills (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    employee_id uuid NOT NULL,
    skill_name text NOT NULL,
    proficiency_level integer NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT employee_skills_proficiency_level_check CHECK (((proficiency_level >= 1) AND (proficiency_level <= 5)))
)

ALTER TABLE public.employee_skills OWNER TO supabase_admin

--
-- Name: employees; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.employees (
    id uuid NOT NULL,
    employee_id text NOT NULL,
    name text NOT NULL,
    email text,
    phone text,
    department text NOT NULL,
    "position" text NOT NULL,
    hire_date date NOT NULL,
    salary numeric(10,2),
    status text DEFAULT '在職'::text,
    manager_id uuid,
    avatar_url text,
    address text,
    emergency_contact_name text,
    emergency_contact_phone text,
    notes text,
    created_by uuid NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    role text DEFAULT 'employee'::text,
    CONSTRAINT employees_role_check CHECK ((role = ANY (ARRAY['boss'::text, 'hr'::text, 'employee'::text]))),
    CONSTRAINT employees_status_check CHECK ((status = ANY (ARRAY['在職'::text, '離職'::text, '留職停薪'::text, '解雇'::text])))
)

ALTER TABLE public.employees OWNER TO supabase_admin

--
-- Name: COLUMN employees.role; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.employees.role IS '員工角色 (boss: 老闆, hr: 人事, employee: 一般員工)'

--
-- Name: floor_plan_permissions; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.floor_plan_permissions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    floor_plan_id uuid NOT NULL,
    user_id uuid NOT NULL,
    permission_level integer NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT floor_plan_permissions_permission_level_check CHECK (((permission_level >= 1) AND (permission_level <= 3)))
)

ALTER TABLE public.floor_plan_permissions OWNER TO supabase_admin

--
-- Name: floor_plans; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.floor_plans (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    image_url text NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    project_id uuid
)

ALTER TABLE public.floor_plans OWNER TO supabase_admin

ALTER TABLE public.holidays OWNER TO supabase_admin

--
-- Name: TABLE holidays; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON TABLE public.holidays IS '國定假日資料表'

--
-- Name: COLUMN holidays.date; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.holidays.date IS '假日日期'

--
-- Name: COLUMN holidays.name; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.holidays.name IS '假日名稱'

--
-- Name: COLUMN holidays.year; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.holidays.year IS '年份'

--
-- Name: COLUMN holidays.description; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.holidays.description IS '備註說明'

--
-- Name: COLUMN holidays.is_workday; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.holidays.is_workday IS '是否為調整上班日（補班日）'

--
-- Name: images; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.images (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    filename text NOT NULL,
    original_name text,
    file_path text NOT NULL,
    file_size integer,
    mime_type text,
    project_id uuid,
    uploaded_by uuid NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
)

ALTER TABLE public.images OWNER TO supabase_admin

--
-- Name: job_vacancies; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.job_vacancies (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    title text NOT NULL,
    department text NOT NULL,
    location text NOT NULL,
    type text DEFAULT '全職'::text,
    requirements text[] DEFAULT '{}'::text[],
    responsibilities text[] DEFAULT '{}'::text[],
    description text,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
)

ALTER TABLE public.job_vacancies OWNER TO supabase_admin

--
-- Name: TABLE job_vacancies; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON TABLE public.job_vacancies IS '職位空缺資料表'

--
-- Name: COLUMN job_vacancies.id; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.job_vacancies.id IS '職位ID (UUID)'

--
-- Name: COLUMN job_vacancies.title; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.job_vacancies.title IS '職位名稱'

--
-- Name: COLUMN job_vacancies.department; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.job_vacancies.department IS '所屬部門'

--
-- Name: COLUMN job_vacancies.location; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.job_vacancies.location IS '工作地點'

--
-- Name: COLUMN job_vacancies.type; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.job_vacancies.type IS '職位類型 (全職/兼職/實習)'

--
-- Name: COLUMN job_vacancies.requirements; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.job_vacancies.requirements IS '應徵條件列表'

--
-- Name: COLUMN job_vacancies.responsibilities; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.job_vacancies.responsibilities IS '工作職責列表'

--
-- Name: COLUMN job_vacancies.description; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.job_vacancies.description IS '職位詳細描述'

--
-- Name: COLUMN job_vacancies.is_active; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.job_vacancies.is_active IS '是否為活躍職位'

--
-- Name: COLUMN job_vacancies.created_at; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.job_vacancies.created_at IS '建立時間'

--
-- Name: COLUMN job_vacancies.updated_at; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.job_vacancies.updated_at IS '更新時間'

--
-- Name: leave_balances; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.leave_balances (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    employee_id uuid NOT NULL,
    leave_type text NOT NULL,
    year integer NOT NULL,
    total_days numeric(5,1) DEFAULT 0 NOT NULL,
    used_days numeric(5,1) DEFAULT 0 NOT NULL,
    pending_days numeric(5,1) DEFAULT 0 NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT leave_balances_leave_type_check CHECK ((leave_type = ANY (ARRAY['sick'::text, 'personal'::text, 'annual'::text, 'parental'::text, 'marriage'::text, 'bereavement'::text, 'official'::text, 'maternity'::text, 'paternity'::text, 'menstrual'::text]))),
    CONSTRAINT valid_days CHECK (((total_days >= (0)::numeric) AND (used_days >= (0)::numeric) AND (pending_days >= (0)::numeric) AND ((used_days + pending_days) <= total_days)))
)

ALTER TABLE public.leave_balances OWNER TO supabase_admin

--
-- Name: leave_requests; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.leave_requests (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    employee_id uuid NOT NULL,
    employee_name text NOT NULL,
    leave_type text NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    start_period text DEFAULT 'full_day'::text NOT NULL,
    end_period text DEFAULT 'full_day'::text NOT NULL,
    total_days numeric(5,1) NOT NULL,
    reason text NOT NULL,
    attachment_url text,
    status text DEFAULT 'pending'::text NOT NULL,
    reviewer_id uuid,
    reviewer_name text,
    review_comment text,
    reviewed_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT leave_requests_end_period_check CHECK ((end_period = ANY (ARRAY['full_day'::text, 'morning'::text, 'afternoon'::text]))),
    CONSTRAINT leave_requests_leave_type_check CHECK ((leave_type = ANY (ARRAY['sick'::text, 'personal'::text, 'annual'::text, 'parental'::text, 'marriage'::text, 'bereavement'::text, 'official'::text, 'maternity'::text, 'paternity'::text, 'menstrual'::text]))),
    CONSTRAINT leave_requests_start_period_check CHECK ((start_period = ANY (ARRAY['full_day'::text, 'morning'::text, 'afternoon'::text]))),
    CONSTRAINT leave_requests_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text, 'cancelled'::text]))),
    CONSTRAINT leave_requests_total_days_check CHECK ((total_days > (0)::numeric)),
    CONSTRAINT status_logic CHECK ((((status = 'pending'::text) AND (reviewed_at IS NULL)) OR ((status = ANY (ARRAY['approved'::text, 'rejected'::text])) AND (reviewed_at IS NOT NULL) AND (reviewer_id IS NOT NULL)))),
    CONSTRAINT valid_date_range CHECK ((end_date >= start_date))
)

ALTER TABLE public.leave_requests OWNER TO supabase_admin

--
-- Name: photo_records; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.photo_records (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    floor_plan_id uuid NOT NULL,
    x_coordinate double precision NOT NULL,
    y_coordinate double precision NOT NULL,
    description text,
    user_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    image_url text DEFAULT ''::text NOT NULL
)

ALTER TABLE public.photo_records OWNER TO supabase_admin

--
-- Name: profiles; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.profiles (
    id uuid NOT NULL,
    email text,
    full_name text,
    avatar_url text,
    theme_preference text DEFAULT 'system'::text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT profiles_theme_preference_check CHECK ((theme_preference = ANY (ARRAY['light'::text, 'dark'::text, 'system'::text])))
)

ALTER TABLE public.profiles OWNER TO supabase_admin

--
-- Name: project_clients; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.project_clients (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    name text NOT NULL,
    company text,
    email text,
    phone text,
    notes text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
)

ALTER TABLE public.project_clients OWNER TO supabase_admin

--
-- Name: project_comments; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.project_comments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    user_id uuid NOT NULL,
    content text NOT NULL,
    parent_id uuid,
    attachments jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
)

ALTER TABLE public.project_comments OWNER TO supabase_admin

--
-- Name: project_members; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.project_members (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    user_id uuid NOT NULL,
    role text DEFAULT 'member'::text NOT NULL,
    joined_at timestamp with time zone DEFAULT now()
)

ALTER TABLE public.project_members OWNER TO supabase_admin

--
-- Name: project_tasks; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.project_tasks (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    title text NOT NULL,
    description text,
    status text DEFAULT 'todo'::text NOT NULL,
    priority text DEFAULT 'medium'::text NOT NULL,
    assigned_to uuid,
    due_date date,
    completed_at timestamp with time zone,
    created_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    previous_task_id uuid,
    next_task_id uuid,
    display_order integer DEFAULT 0,
    tags text[]
)

ALTER TABLE public.project_tasks OWNER TO supabase_admin

--
-- Name: project_timeline; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.project_timeline (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    title text NOT NULL,
    description text,
    milestone_date date NOT NULL,
    is_completed boolean DEFAULT false,
    completed_at timestamp with time zone,
    created_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
)

ALTER TABLE public.project_timeline OWNER TO supabase_admin

--
-- Name: projects; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.projects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    description text,
    status text DEFAULT 'active'::text NOT NULL,
    start_date date,
    end_date date,
    budget numeric(15,2),
    owner_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT projects_name_check CHECK ((char_length(name) >= 1))
)

ALTER TABLE public.projects OWNER TO supabase_admin

--
-- Name: system_settings; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.system_settings (
    key text NOT NULL,
    value text,
    description text,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
)

ALTER TABLE public.system_settings OWNER TO supabase_admin

--
-- Name: user_profiles; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.user_profiles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    email text NOT NULL,
    display_name text,
    avatar_url text,
    phone text,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
)

ALTER TABLE public.user_profiles OWNER TO supabase_admin

--
-- Name: TABLE user_profiles; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON TABLE public.user_profiles IS '用戶檔案資料表'

--
-- Name: COLUMN user_profiles.id; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.user_profiles.id IS '檔案系統ID (UUID)'

--
-- Name: COLUMN user_profiles.user_id; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.user_profiles.user_id IS '關聯到認證系統的用戶ID'

--
-- Name: COLUMN user_profiles.email; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.user_profiles.email IS '用戶電子郵件'

--
-- Name: COLUMN user_profiles.display_name; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.user_profiles.display_name IS '顯示姓名'

--
-- Name: COLUMN user_profiles.avatar_url; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.user_profiles.avatar_url IS '頭像網址'

--
-- Name: COLUMN user_profiles.phone; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.user_profiles.phone IS '聯絡電話'

--
-- Name: COLUMN user_profiles.metadata; Type: COMMENT; Schema: public; Owner: supabase_admin
--

COMMENT ON COLUMN public.user_profiles.metadata IS '額外的用戶資料 (JSON 格式)'

--
-- Name: attendance_leave_requests attendance_leave_requests_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.attendance_leave_requests
    ADD CONSTRAINT attendance_leave_requests_pkey PRIMARY KEY (id)

--
-- Name: attendance_records attendance_records_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.attendance_records
    ADD CONSTRAINT attendance_records_pkey PRIMARY KEY (id)

--
-- Name: customers customers_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.customers
    ADD CONSTRAINT customers_pkey PRIMARY KEY (id)

--
-- Name: customers customers_user_id_key; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.customers
    ADD CONSTRAINT customers_user_id_key UNIQUE (user_id)

--
-- Name: employee_skills employee_skills_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.employee_skills
    ADD CONSTRAINT employee_skills_pkey PRIMARY KEY (id)

--
-- Name: employees employees_email_key; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_email_key UNIQUE (email)

--
-- Name: employees employees_employee_id_key; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_employee_id_key UNIQUE (employee_id)

--
-- Name: employees employees_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_pkey PRIMARY KEY (id)

--
-- Name: floor_plan_permissions floor_plan_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.floor_plan_permissions
    ADD CONSTRAINT floor_plan_permissions_pkey PRIMARY KEY (id)

--
-- Name: floor_plans floor_plans_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.floor_plans
    ADD CONSTRAINT floor_plans_pkey PRIMARY KEY (id)

--
-- Name: holidays holidays_date_key; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.holidays
    ADD CONSTRAINT holidays_date_key UNIQUE (date)

--
-- Name: holidays holidays_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.holidays
    ADD CONSTRAINT holidays_pkey PRIMARY KEY (id)

--
-- Name: images images_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.images
    ADD CONSTRAINT images_pkey PRIMARY KEY (id)

--
-- Name: job_vacancies job_vacancies_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.job_vacancies
    ADD CONSTRAINT job_vacancies_pkey PRIMARY KEY (id)

--
-- Name: leave_balances leave_balances_employee_id_leave_type_year_key; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.leave_balances
    ADD CONSTRAINT leave_balances_employee_id_leave_type_year_key UNIQUE (employee_id, leave_type, year)

--
-- Name: leave_balances leave_balances_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.leave_balances
    ADD CONSTRAINT leave_balances_pkey PRIMARY KEY (id)

--
-- Name: leave_requests leave_requests_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.leave_requests
    ADD CONSTRAINT leave_requests_pkey PRIMARY KEY (id)

--
-- Name: photo_records photo_records_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.photo_records
    ADD CONSTRAINT photo_records_pkey PRIMARY KEY (id)

--
-- Name: profiles profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_pkey PRIMARY KEY (id)

--
-- Name: project_clients project_clients_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_clients
    ADD CONSTRAINT project_clients_pkey PRIMARY KEY (id)

--
-- Name: project_comments project_comments_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_comments
    ADD CONSTRAINT project_comments_pkey PRIMARY KEY (id)

--
-- Name: project_members project_members_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_members
    ADD CONSTRAINT project_members_pkey PRIMARY KEY (id)

--
-- Name: project_members project_members_project_id_user_id_key; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_members
    ADD CONSTRAINT project_members_project_id_user_id_key UNIQUE (project_id, user_id)

--
-- Name: project_tasks project_tasks_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_tasks
    ADD CONSTRAINT project_tasks_pkey PRIMARY KEY (id)

--
-- Name: project_timeline project_timeline_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_timeline
    ADD CONSTRAINT project_timeline_pkey PRIMARY KEY (id)

--
-- Name: projects projects_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.projects
    ADD CONSTRAINT projects_pkey PRIMARY KEY (id)

--
-- Name: system_settings system_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.system_settings
    ADD CONSTRAINT system_settings_pkey PRIMARY KEY (key)

--
-- Name: employee_skills unique_employee_skill; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.employee_skills
    ADD CONSTRAINT unique_employee_skill UNIQUE (employee_id, skill_name)

--
-- Name: user_profiles user_profiles_email_key; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.user_profiles
    ADD CONSTRAINT user_profiles_email_key UNIQUE (email)

--
-- Name: user_profiles user_profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.user_profiles
    ADD CONSTRAINT user_profiles_pkey PRIMARY KEY (id)

--
-- Name: user_profiles user_profiles_user_id_key; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.user_profiles
    ADD CONSTRAINT user_profiles_user_id_key UNIQUE (user_id)

--
-- Name: idx_attendance_leave_requests_created_at; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_attendance_leave_requests_created_at ON public.attendance_leave_requests USING btree (created_at DESC)

--
-- Name: idx_attendance_leave_requests_employee_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_attendance_leave_requests_employee_id ON public.attendance_leave_requests USING btree (employee_id)

--
-- Name: idx_attendance_leave_requests_request_date; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_attendance_leave_requests_request_date ON public.attendance_leave_requests USING btree (request_date DESC)

--
-- Name: idx_attendance_leave_requests_status; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_attendance_leave_requests_status ON public.attendance_leave_requests USING btree (status)

--
-- Name: idx_attendance_records_check_in_time; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_attendance_records_check_in_time ON public.attendance_records USING btree (check_in_time)

--
-- Name: idx_attendance_records_employee_email; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_attendance_records_employee_email ON public.attendance_records USING btree (employee_email)

--
-- Name: idx_attendance_records_employee_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_attendance_records_employee_id ON public.attendance_records USING btree (employee_id)

--
-- Name: idx_customers_company; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_customers_company ON public.customers USING btree (company)

--
-- Name: idx_customers_email; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_customers_email ON public.customers USING btree (email)

--
-- Name: idx_customers_user_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_customers_user_id ON public.customers USING btree (user_id)

--
-- Name: idx_employees_department; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_employees_department ON public.employees USING btree (department)

--
-- Name: idx_employees_email; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_employees_email ON public.employees USING btree (email)

--
-- Name: idx_employees_employee_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_employees_employee_id ON public.employees USING btree (employee_id)

--
-- Name: idx_employees_hire_date; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_employees_hire_date ON public.employees USING btree (hire_date DESC)

--
-- Name: idx_employees_manager_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_employees_manager_id ON public.employees USING btree (manager_id)

--
-- Name: idx_employees_position; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_employees_position ON public.employees USING btree ("position")

--
-- Name: idx_employees_role; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_employees_role ON public.employees USING btree (role)

--
-- Name: idx_employees_status; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_employees_status ON public.employees USING btree (status)

--
-- Name: idx_floor_plan_permissions_floor_plan_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_floor_plan_permissions_floor_plan_id ON public.floor_plan_permissions USING btree (floor_plan_id)

--
-- Name: idx_floor_plan_permissions_user_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_floor_plan_permissions_user_id ON public.floor_plan_permissions USING btree (user_id)

--
-- Name: idx_floor_plans_project_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_floor_plans_project_id ON public.floor_plans USING btree (project_id)

--
-- Name: idx_holidays_date; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_holidays_date ON public.holidays USING btree (date)

--
-- Name: idx_holidays_workday; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_holidays_workday ON public.holidays USING btree (is_workday) WHERE (is_workday = false)

--
-- Name: idx_holidays_year; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_holidays_year ON public.holidays USING btree (year)

--
-- Name: idx_job_vacancies_active; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_job_vacancies_active ON public.job_vacancies USING btree (is_active)

--
-- Name: idx_job_vacancies_created_at; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_job_vacancies_created_at ON public.job_vacancies USING btree (created_at DESC)

--
-- Name: idx_job_vacancies_department; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_job_vacancies_department ON public.job_vacancies USING btree (department)

--
-- Name: idx_job_vacancies_type; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_job_vacancies_type ON public.job_vacancies USING btree (type)

--
-- Name: idx_leave_balances_employee; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_leave_balances_employee ON public.leave_balances USING btree (employee_id)

--
-- Name: idx_leave_balances_year; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_leave_balances_year ON public.leave_balances USING btree (year)

--
-- Name: idx_leave_requests_created; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_leave_requests_created ON public.leave_requests USING btree (created_at DESC)

--
-- Name: idx_leave_requests_dates; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_leave_requests_dates ON public.leave_requests USING btree (start_date, end_date)

--
-- Name: idx_leave_requests_employee; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_leave_requests_employee ON public.leave_requests USING btree (employee_id)

--
-- Name: idx_leave_requests_status; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_leave_requests_status ON public.leave_requests USING btree (status)

--
-- Name: idx_project_clients_project_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_clients_project_id ON public.project_clients USING btree (project_id)

--
-- Name: idx_project_comments_parent_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_comments_parent_id ON public.project_comments USING btree (parent_id)

--
-- Name: idx_project_comments_project_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_comments_project_id ON public.project_comments USING btree (project_id)

--
-- Name: idx_project_members_project_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_members_project_id ON public.project_members USING btree (project_id)

--
-- Name: idx_project_members_user_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_members_user_id ON public.project_members USING btree (user_id)

--
-- Name: idx_project_tasks_assigned_to; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_tasks_assigned_to ON public.project_tasks USING btree (assigned_to)

--
-- Name: idx_project_tasks_next; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_tasks_next ON public.project_tasks USING btree (next_task_id)

--
-- Name: idx_project_tasks_previous; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_tasks_previous ON public.project_tasks USING btree (previous_task_id)

--
-- Name: idx_project_tasks_project_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_tasks_project_id ON public.project_tasks USING btree (project_id)

--
-- Name: idx_project_tasks_status; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_tasks_status ON public.project_tasks USING btree (status)

--
-- Name: idx_project_timeline_date; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_timeline_date ON public.project_timeline USING btree (milestone_date)

--
-- Name: idx_project_timeline_project_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_project_timeline_project_id ON public.project_timeline USING btree (project_id)

--
-- Name: idx_projects_owner_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_projects_owner_id ON public.projects USING btree (owner_id)

--
-- Name: idx_projects_status; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_projects_status ON public.projects USING btree (status)

--
-- Name: idx_user_profiles_display_name; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_user_profiles_display_name ON public.user_profiles USING btree (display_name)

--
-- Name: idx_user_profiles_email; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_user_profiles_email ON public.user_profiles USING btree (email)

--
-- Name: idx_user_profiles_user_id; Type: INDEX; Schema: public; Owner: supabase_admin
--

CREATE INDEX idx_user_profiles_user_id ON public.user_profiles USING btree (user_id)

--
-- Name: leave_balances trigger_leave_balances_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER trigger_leave_balances_updated_at BEFORE UPDATE ON public.leave_balances FOR EACH ROW EXECUTE FUNCTION public.update_leave_balances_updated_at()

--
-- Name: leave_requests trigger_leave_requests_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER trigger_leave_requests_updated_at BEFORE UPDATE ON public.leave_requests FOR EACH ROW EXECUTE FUNCTION public.update_leave_requests_updated_at()

--
-- Name: leave_requests trigger_update_leave_balance; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER trigger_update_leave_balance AFTER INSERT OR UPDATE ON public.leave_requests FOR EACH ROW EXECUTE FUNCTION public.update_leave_balance_on_request_change()

--
-- Name: attendance_leave_requests update_attendance_leave_requests_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER update_attendance_leave_requests_updated_at BEFORE UPDATE ON public.attendance_leave_requests FOR EACH ROW EXECUTE FUNCTION public.update_attendance_leave_requests_updated_at()

--
-- Name: attendance_records update_attendance_records_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER update_attendance_records_updated_at BEFORE UPDATE ON public.attendance_records FOR EACH ROW EXECUTE FUNCTION public.update_attendance_records_updated_at()

--
-- Name: customers update_customers_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER update_customers_updated_at BEFORE UPDATE ON public.customers FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()

--
-- Name: employees update_employees_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER update_employees_updated_at BEFORE UPDATE ON public.employees FOR EACH ROW EXECUTE FUNCTION public.update_employee_updated_at()

--
-- Name: project_clients update_project_clients_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER update_project_clients_updated_at BEFORE UPDATE ON public.project_clients FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()

--
-- Name: project_comments update_project_comments_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER update_project_comments_updated_at BEFORE UPDATE ON public.project_comments FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()

--
-- Name: project_tasks update_project_tasks_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER update_project_tasks_updated_at BEFORE UPDATE ON public.project_tasks FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()

--
-- Name: project_timeline update_project_timeline_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER update_project_timeline_updated_at BEFORE UPDATE ON public.project_timeline FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()

--
-- Name: projects update_projects_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER update_projects_updated_at BEFORE UPDATE ON public.projects FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()

--
-- Name: user_profiles update_user_profiles_updated_at; Type: TRIGGER; Schema: public; Owner: supabase_admin
--

CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON public.user_profiles FOR EACH ROW EXECUTE FUNCTION public.update_user_profiles_updated_at()

--
-- Name: attendance_leave_requests attendance_leave_requests_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.attendance_leave_requests
    ADD CONSTRAINT attendance_leave_requests_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE

--
-- Name: attendance_leave_requests attendance_leave_requests_reviewer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.attendance_leave_requests
    ADD CONSTRAINT attendance_leave_requests_reviewer_id_fkey FOREIGN KEY (reviewer_id) REFERENCES public.employees(id)

--
-- Name: attendance_records attendance_records_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.attendance_records
    ADD CONSTRAINT attendance_records_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE

--
-- Name: employee_skills employee_skills_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.employee_skills
    ADD CONSTRAINT employee_skills_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE

--
-- Name: employees employees_manager_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_manager_id_fkey FOREIGN KEY (manager_id) REFERENCES public.employees(id)

--
-- Name: floor_plan_permissions floor_plan_permissions_floor_plan_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.floor_plan_permissions
    ADD CONSTRAINT floor_plan_permissions_floor_plan_id_fkey FOREIGN KEY (floor_plan_id) REFERENCES public.floor_plans(id)

--
-- Name: floor_plans floor_plans_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.floor_plans
    ADD CONSTRAINT floor_plans_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE SET NULL

--
-- Name: leave_balances leave_balances_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.leave_balances
    ADD CONSTRAINT leave_balances_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE

--
-- Name: leave_requests leave_requests_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.leave_requests
    ADD CONSTRAINT leave_requests_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE

--
-- Name: leave_requests leave_requests_reviewer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.leave_requests
    ADD CONSTRAINT leave_requests_reviewer_id_fkey FOREIGN KEY (reviewer_id) REFERENCES public.employees(id) ON DELETE SET NULL

--
-- Name: photo_records photo_records_floor_plan_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.photo_records
    ADD CONSTRAINT photo_records_floor_plan_id_fkey FOREIGN KEY (floor_plan_id) REFERENCES public.floor_plans(id)

--
-- Name: project_clients project_clients_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_clients
    ADD CONSTRAINT project_clients_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE

--
-- Name: project_comments project_comments_parent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_comments
    ADD CONSTRAINT project_comments_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.project_comments(id) ON DELETE CASCADE

--
-- Name: project_comments project_comments_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_comments
    ADD CONSTRAINT project_comments_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE

--
-- Name: project_members project_members_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_members
    ADD CONSTRAINT project_members_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE

--
-- Name: project_tasks project_tasks_next_task_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_tasks
    ADD CONSTRAINT project_tasks_next_task_id_fkey FOREIGN KEY (next_task_id) REFERENCES public.project_tasks(id) ON DELETE SET NULL

--
-- Name: project_tasks project_tasks_previous_task_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_tasks
    ADD CONSTRAINT project_tasks_previous_task_id_fkey FOREIGN KEY (previous_task_id) REFERENCES public.project_tasks(id) ON DELETE SET NULL

--
-- Name: project_tasks project_tasks_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_tasks
    ADD CONSTRAINT project_tasks_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE

--
-- Name: project_timeline project_timeline_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.project_timeline
    ADD CONSTRAINT project_timeline_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE

--
-- Name: holidays Anyone can read holidays; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Anyone can read holidays" ON public.holidays FOR SELECT TO authenticated USING (true)

--
-- Name: job_vacancies Anyone can view active job vacancies; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Anyone can view active job vacancies" ON public.job_vacancies FOR SELECT USING ((is_active = true))

--
-- Name: employees Boss can delete employees; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Boss can delete employees" ON public.employees FOR DELETE USING ((public.get_current_user_role() = 'boss'::text))

--
-- Name: employees Boss can update all employees; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Boss can update all employees" ON public.employees FOR UPDATE USING ((public.get_current_user_role() = 'boss'::text))

--
-- Name: employees HR can update non-boss employees; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "HR can update non-boss employees" ON public.employees FOR UPDATE USING (((public.get_current_user_role() = 'hr'::text) AND (role <> 'boss'::text)))

--
-- Name: attendance_records Managers can delete attendance; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Managers can delete attendance" ON public.attendance_records FOR DELETE USING ((public.get_current_user_role() = ANY (ARRAY['boss'::text, 'hr'::text])))

--
-- Name: attendance_records Managers can insert any attendance; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Managers can insert any attendance" ON public.attendance_records FOR INSERT WITH CHECK ((public.get_current_user_role() = ANY (ARRAY['boss'::text, 'hr'::text])))

--
-- Name: employees Managers can insert employees; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Managers can insert employees" ON public.employees FOR INSERT WITH CHECK ((public.get_current_user_role() = ANY (ARRAY['boss'::text, 'hr'::text])))

--
-- Name: attendance_records Managers can update all attendance; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Managers can update all attendance" ON public.attendance_records FOR UPDATE USING ((public.get_current_user_role() = ANY (ARRAY['boss'::text, 'hr'::text])))

--
-- Name: attendance_leave_requests Managers can update requests; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Managers can update requests" ON public.attendance_leave_requests FOR UPDATE USING ((public.get_current_user_role() = ANY (ARRAY['boss'::text, 'hr'::text])))

--
-- Name: attendance_records Managers can view all attendance; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Managers can view all attendance" ON public.attendance_records FOR SELECT USING ((public.get_current_user_role() = ANY (ARRAY['boss'::text, 'hr'::text])))

--
-- Name: employees Managers can view all employees; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Managers can view all employees" ON public.employees FOR SELECT USING ((public.get_current_user_role() = ANY (ARRAY['boss'::text, 'hr'::text])))

--
-- Name: attendance_leave_requests Managers can view all requests; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Managers can view all requests" ON public.attendance_leave_requests FOR SELECT USING ((public.get_current_user_role() = ANY (ARRAY['boss'::text, 'hr'::text])))

--
-- Name: attendance_leave_requests; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.attendance_leave_requests ENABLE ROW LEVEL SECURITY

--
-- Name: attendance_records; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.attendance_records ENABLE ROW LEVEL SECURITY

--
-- Name: customers; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.customers ENABLE ROW LEVEL SECURITY

--
-- Name: employee_skills; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.employee_skills ENABLE ROW LEVEL SECURITY

--
-- Name: employees; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.employees ENABLE ROW LEVEL SECURITY

--
-- Name: floor_plan_permissions; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.floor_plan_permissions ENABLE ROW LEVEL SECURITY

--
-- Name: floor_plans; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.floor_plans ENABLE ROW LEVEL SECURITY

--
-- Name: holidays; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.holidays ENABLE ROW LEVEL SECURITY

--
-- Name: job_vacancies; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.job_vacancies ENABLE ROW LEVEL SECURITY

--
-- Name: leave_balances; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.leave_balances ENABLE ROW LEVEL SECURITY

--
-- Name: leave_requests; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.leave_requests ENABLE ROW LEVEL SECURITY

--
-- Name: photo_records; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.photo_records ENABLE ROW LEVEL SECURITY

--
-- Name: project_clients; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.project_clients ENABLE ROW LEVEL SECURITY

--
-- Name: project_comments; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.project_comments ENABLE ROW LEVEL SECURITY

--
-- Name: project_members; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.project_members ENABLE ROW LEVEL SECURITY

--
-- Name: project_tasks; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.project_tasks ENABLE ROW LEVEL SECURITY

--
-- Name: project_timeline; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.project_timeline ENABLE ROW LEVEL SECURITY

--
-- Name: projects; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.projects ENABLE ROW LEVEL SECURITY

--
-- Name: user_profiles; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY

GRANT ALL ON SCHEMA auth TO postgres

--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres

--
-- Name: FUNCTION get_current_user_role(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.get_current_user_role() TO postgres

GRANT ALL ON FUNCTION public.get_current_user_role() TO anon

GRANT ALL ON FUNCTION public.get_current_user_role() TO authenticated

GRANT ALL ON FUNCTION public.get_current_user_role() TO service_role

--
-- Name: FUNCTION get_employee_leave_balance(p_employee_id uuid, p_year integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.get_employee_leave_balance(p_employee_id uuid, p_year integer) TO postgres

GRANT ALL ON FUNCTION public.get_employee_leave_balance(p_employee_id uuid, p_year integer) TO anon

GRANT ALL ON FUNCTION public.get_employee_leave_balance(p_employee_id uuid, p_year integer) TO authenticated

GRANT ALL ON FUNCTION public.get_employee_leave_balance(p_employee_id uuid, p_year integer) TO service_role

--
-- Name: FUNCTION get_floor_plan_permissions(p_floor_plan_id uuid); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.get_floor_plan_permissions(p_floor_plan_id uuid) TO postgres

GRANT ALL ON FUNCTION public.get_floor_plan_permissions(p_floor_plan_id uuid) TO anon

GRANT ALL ON FUNCTION public.get_floor_plan_permissions(p_floor_plan_id uuid) TO authenticated

GRANT ALL ON FUNCTION public.get_floor_plan_permissions(p_floor_plan_id uuid) TO service_role

--
-- Name: FUNCTION get_project_statistics(p_project_id uuid); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.get_project_statistics(p_project_id uuid) TO postgres

GRANT ALL ON FUNCTION public.get_project_statistics(p_project_id uuid) TO anon

GRANT ALL ON FUNCTION public.get_project_statistics(p_project_id uuid) TO authenticated

GRANT ALL ON FUNCTION public.get_project_statistics(p_project_id uuid) TO service_role

--
-- Name: FUNCTION get_user_role(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.get_user_role() TO postgres

GRANT ALL ON FUNCTION public.get_user_role() TO anon

GRANT ALL ON FUNCTION public.get_user_role() TO authenticated

GRANT ALL ON FUNCTION public.get_user_role() TO service_role

--
-- Name: FUNCTION handle_new_user(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.handle_new_user() TO postgres

GRANT ALL ON FUNCTION public.handle_new_user() TO anon

GRANT ALL ON FUNCTION public.handle_new_user() TO authenticated

GRANT ALL ON FUNCTION public.handle_new_user() TO service_role

--
-- Name: FUNCTION has_floor_plan_access(p_floor_plan_id uuid, p_user_id uuid); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.has_floor_plan_access(p_floor_plan_id uuid, p_user_id uuid) TO postgres

GRANT ALL ON FUNCTION public.has_floor_plan_access(p_floor_plan_id uuid, p_user_id uuid) TO anon

GRANT ALL ON FUNCTION public.has_floor_plan_access(p_floor_plan_id uuid, p_user_id uuid) TO authenticated

GRANT ALL ON FUNCTION public.has_floor_plan_access(p_floor_plan_id uuid, p_user_id uuid) TO service_role

--
-- Name: FUNCTION has_floor_plan_admin_access(p_floor_plan_id uuid, p_user_id uuid); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.has_floor_plan_admin_access(p_floor_plan_id uuid, p_user_id uuid) TO postgres

GRANT ALL ON FUNCTION public.has_floor_plan_admin_access(p_floor_plan_id uuid, p_user_id uuid) TO anon

GRANT ALL ON FUNCTION public.has_floor_plan_admin_access(p_floor_plan_id uuid, p_user_id uuid) TO authenticated

GRANT ALL ON FUNCTION public.has_floor_plan_admin_access(p_floor_plan_id uuid, p_user_id uuid) TO service_role

--
-- Name: FUNCTION has_floor_plan_edit_access(p_floor_plan_id uuid, p_user_id uuid); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.has_floor_plan_edit_access(p_floor_plan_id uuid, p_user_id uuid) TO postgres

GRANT ALL ON FUNCTION public.has_floor_plan_edit_access(p_floor_plan_id uuid, p_user_id uuid) TO anon

GRANT ALL ON FUNCTION public.has_floor_plan_edit_access(p_floor_plan_id uuid, p_user_id uuid) TO authenticated

GRANT ALL ON FUNCTION public.has_floor_plan_edit_access(p_floor_plan_id uuid, p_user_id uuid) TO service_role

--
-- Name: FUNCTION has_project_access(p_project_id uuid, p_user_id uuid); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.has_project_access(p_project_id uuid, p_user_id uuid) TO postgres

GRANT ALL ON FUNCTION public.has_project_access(p_project_id uuid, p_user_id uuid) TO anon

GRANT ALL ON FUNCTION public.has_project_access(p_project_id uuid, p_user_id uuid) TO authenticated

GRANT ALL ON FUNCTION public.has_project_access(p_project_id uuid, p_user_id uuid) TO service_role

--
-- Name: FUNCTION has_project_admin_access(p_project_id uuid, p_user_id uuid); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.has_project_admin_access(p_project_id uuid, p_user_id uuid) TO postgres

GRANT ALL ON FUNCTION public.has_project_admin_access(p_project_id uuid, p_user_id uuid) TO anon

GRANT ALL ON FUNCTION public.has_project_admin_access(p_project_id uuid, p_user_id uuid) TO authenticated

GRANT ALL ON FUNCTION public.has_project_admin_access(p_project_id uuid, p_user_id uuid) TO service_role

--
-- Name: FUNCTION initialize_leave_balance(p_employee_id uuid, p_leave_type text, p_year integer, p_total_days numeric); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.initialize_leave_balance(p_employee_id uuid, p_leave_type text, p_year integer, p_total_days numeric) TO postgres

GRANT ALL ON FUNCTION public.initialize_leave_balance(p_employee_id uuid, p_leave_type text, p_year integer, p_total_days numeric) TO anon

GRANT ALL ON FUNCTION public.initialize_leave_balance(p_employee_id uuid, p_leave_type text, p_year integer, p_total_days numeric) TO authenticated

GRANT ALL ON FUNCTION public.initialize_leave_balance(p_employee_id uuid, p_leave_type text, p_year integer, p_total_days numeric) TO service_role

--
-- Name: FUNCTION is_boss(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.is_boss() TO postgres

GRANT ALL ON FUNCTION public.is_boss() TO anon

GRANT ALL ON FUNCTION public.is_boss() TO authenticated

GRANT ALL ON FUNCTION public.is_boss() TO service_role

--
-- Name: FUNCTION is_boss_or_hr(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.is_boss_or_hr() TO postgres

GRANT ALL ON FUNCTION public.is_boss_or_hr() TO anon

GRANT ALL ON FUNCTION public.is_boss_or_hr() TO authenticated

GRANT ALL ON FUNCTION public.is_boss_or_hr() TO service_role

--
-- Name: FUNCTION is_hr(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.is_hr() TO postgres

GRANT ALL ON FUNCTION public.is_hr() TO anon

GRANT ALL ON FUNCTION public.is_hr() TO authenticated

GRANT ALL ON FUNCTION public.is_hr() TO service_role

--
-- Name: FUNCTION update_attendance_leave_requests_updated_at(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.update_attendance_leave_requests_updated_at() TO postgres

GRANT ALL ON FUNCTION public.update_attendance_leave_requests_updated_at() TO anon

GRANT ALL ON FUNCTION public.update_attendance_leave_requests_updated_at() TO authenticated

GRANT ALL ON FUNCTION public.update_attendance_leave_requests_updated_at() TO service_role

--
-- Name: FUNCTION update_attendance_records_updated_at(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.update_attendance_records_updated_at() TO postgres

GRANT ALL ON FUNCTION public.update_attendance_records_updated_at() TO anon

GRANT ALL ON FUNCTION public.update_attendance_records_updated_at() TO authenticated

GRANT ALL ON FUNCTION public.update_attendance_records_updated_at() TO service_role

--
-- Name: FUNCTION update_employee_updated_at(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.update_employee_updated_at() TO postgres

GRANT ALL ON FUNCTION public.update_employee_updated_at() TO anon

GRANT ALL ON FUNCTION public.update_employee_updated_at() TO authenticated

GRANT ALL ON FUNCTION public.update_employee_updated_at() TO service_role

--
-- Name: FUNCTION update_leave_balance_on_request_change(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.update_leave_balance_on_request_change() TO postgres

GRANT ALL ON FUNCTION public.update_leave_balance_on_request_change() TO anon

GRANT ALL ON FUNCTION public.update_leave_balance_on_request_change() TO authenticated

GRANT ALL ON FUNCTION public.update_leave_balance_on_request_change() TO service_role

--
-- Name: FUNCTION update_leave_balances_updated_at(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.update_leave_balances_updated_at() TO postgres

GRANT ALL ON FUNCTION public.update_leave_balances_updated_at() TO anon

GRANT ALL ON FUNCTION public.update_leave_balances_updated_at() TO authenticated

GRANT ALL ON FUNCTION public.update_leave_balances_updated_at() TO service_role

--
-- Name: FUNCTION update_leave_requests_updated_at(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.update_leave_requests_updated_at() TO postgres

GRANT ALL ON FUNCTION public.update_leave_requests_updated_at() TO anon

GRANT ALL ON FUNCTION public.update_leave_requests_updated_at() TO authenticated

GRANT ALL ON FUNCTION public.update_leave_requests_updated_at() TO service_role

--
-- Name: FUNCTION update_updated_at_column(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.update_updated_at_column() TO postgres

GRANT ALL ON FUNCTION public.update_updated_at_column() TO anon

GRANT ALL ON FUNCTION public.update_updated_at_column() TO authenticated

GRANT ALL ON FUNCTION public.update_updated_at_column() TO service_role

--
-- Name: FUNCTION update_user_profiles_updated_at(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.update_user_profiles_updated_at() TO postgres

GRANT ALL ON FUNCTION public.update_user_profiles_updated_at() TO anon

GRANT ALL ON FUNCTION public.update_user_profiles_updated_at() TO authenticated

GRANT ALL ON FUNCTION public.update_user_profiles_updated_at() TO service_role

--
-- Name: TABLE attendance_leave_requests; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.attendance_leave_requests TO postgres

GRANT ALL ON TABLE public.attendance_leave_requests TO anon

GRANT ALL ON TABLE public.attendance_leave_requests TO authenticated

GRANT ALL ON TABLE public.attendance_leave_requests TO service_role

--
-- Name: TABLE attendance_records; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.attendance_records TO postgres

GRANT ALL ON TABLE public.attendance_records TO anon

GRANT ALL ON TABLE public.attendance_records TO authenticated

GRANT ALL ON TABLE public.attendance_records TO service_role

--
-- Name: TABLE customers; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.customers TO postgres

GRANT ALL ON TABLE public.customers TO anon

GRANT ALL ON TABLE public.customers TO authenticated

GRANT ALL ON TABLE public.customers TO service_role

--
-- Name: TABLE employee_skills; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.employee_skills TO postgres

GRANT ALL ON TABLE public.employee_skills TO anon

GRANT ALL ON TABLE public.employee_skills TO authenticated

GRANT ALL ON TABLE public.employee_skills TO service_role

--
-- Name: TABLE employees; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.employees TO postgres

GRANT ALL ON TABLE public.employees TO anon

GRANT ALL ON TABLE public.employees TO authenticated

GRANT ALL ON TABLE public.employees TO service_role

--
-- Name: TABLE floor_plan_permissions; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.floor_plan_permissions TO postgres

GRANT ALL ON TABLE public.floor_plan_permissions TO anon

GRANT ALL ON TABLE public.floor_plan_permissions TO authenticated

GRANT ALL ON TABLE public.floor_plan_permissions TO service_role

--
-- Name: TABLE floor_plans; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.floor_plans TO postgres

GRANT ALL ON TABLE public.floor_plans TO anon

GRANT ALL ON TABLE public.floor_plans TO authenticated

GRANT ALL ON TABLE public.floor_plans TO service_role

--
-- Name: TABLE holidays; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.holidays TO postgres

GRANT ALL ON TABLE public.holidays TO anon

GRANT ALL ON TABLE public.holidays TO authenticated

GRANT ALL ON TABLE public.holidays TO service_role

--
-- Name: TABLE images; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.images TO postgres

GRANT ALL ON TABLE public.images TO anon

GRANT ALL ON TABLE public.images TO authenticated

GRANT ALL ON TABLE public.images TO service_role

--
-- Name: TABLE job_vacancies; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.job_vacancies TO postgres

GRANT ALL ON TABLE public.job_vacancies TO anon

GRANT ALL ON TABLE public.job_vacancies TO authenticated

GRANT ALL ON TABLE public.job_vacancies TO service_role

--
-- Name: TABLE leave_balances; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.leave_balances TO postgres

GRANT ALL ON TABLE public.leave_balances TO anon

GRANT ALL ON TABLE public.leave_balances TO authenticated

GRANT ALL ON TABLE public.leave_balances TO service_role

--
-- Name: TABLE leave_requests; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.leave_requests TO postgres

GRANT ALL ON TABLE public.leave_requests TO anon

GRANT ALL ON TABLE public.leave_requests TO authenticated

GRANT ALL ON TABLE public.leave_requests TO service_role

--
-- Name: TABLE photo_records; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.photo_records TO postgres

GRANT ALL ON TABLE public.photo_records TO anon

GRANT ALL ON TABLE public.photo_records TO authenticated

GRANT ALL ON TABLE public.photo_records TO service_role

--
-- Name: TABLE profiles; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.profiles TO postgres

GRANT ALL ON TABLE public.profiles TO anon

GRANT ALL ON TABLE public.profiles TO authenticated

GRANT ALL ON TABLE public.profiles TO service_role

--
-- Name: TABLE project_clients; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.project_clients TO postgres

GRANT ALL ON TABLE public.project_clients TO anon

GRANT ALL ON TABLE public.project_clients TO authenticated

GRANT ALL ON TABLE public.project_clients TO service_role

--
-- Name: TABLE project_comments; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.project_comments TO postgres

GRANT ALL ON TABLE public.project_comments TO anon

GRANT ALL ON TABLE public.project_comments TO authenticated

GRANT ALL ON TABLE public.project_comments TO service_role

--
-- Name: TABLE project_members; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.project_members TO postgres

GRANT ALL ON TABLE public.project_members TO anon

GRANT ALL ON TABLE public.project_members TO authenticated

GRANT ALL ON TABLE public.project_members TO service_role

--
-- Name: TABLE project_tasks; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.project_tasks TO postgres

GRANT ALL ON TABLE public.project_tasks TO anon

GRANT ALL ON TABLE public.project_tasks TO authenticated

GRANT ALL ON TABLE public.project_tasks TO service_role

--
-- Name: TABLE project_timeline; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.project_timeline TO postgres

GRANT ALL ON TABLE public.project_timeline TO anon

GRANT ALL ON TABLE public.project_timeline TO authenticated

GRANT ALL ON TABLE public.project_timeline TO service_role

--
-- Name: TABLE projects; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.projects TO postgres

GRANT ALL ON TABLE public.projects TO anon

GRANT ALL ON TABLE public.projects TO authenticated

GRANT ALL ON TABLE public.projects TO service_role

--
-- Name: TABLE system_settings; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.system_settings TO postgres

GRANT ALL ON TABLE public.system_settings TO anon

GRANT ALL ON TABLE public.system_settings TO authenticated

GRANT ALL ON TABLE public.system_settings TO service_role

--
-- Name: TABLE user_profiles; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.user_profiles TO postgres

GRANT ALL ON TABLE public.user_profiles TO anon

GRANT ALL ON TABLE public.user_profiles TO authenticated

GRANT ALL ON TABLE public.user_profiles TO service_role

ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres
